version: '3'
services:
  db:
    container_name: ${COMPOSE_PROJECT_NAME}-db
    build: db
    volumes:
      - db-data:/var/lib/mysql
    ports:
      - "33060:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
    restart: always

  app:
    container_name: ${COMPOSE_PROJECT_NAME}-app
    build:
      context: app
      dockerfile: ${ENVIRONMENT}.Dockerfile
      args:
        - ENV=local
        - CODE_REGISTRY=${CODE_REGISTRY}
        - APP_UID=${APP_UID}
        - APP_GID=${APP_GID}
    restart: always
    volumes:
      - ${SRC_DIR}:/var/www/app

  app-debug:
    container_name: ${COMPOSE_PROJECT_NAME}-app-debug
    build:
      context: app
      dockerfile: ${ENVIRONMENT}.Dockerfile
      args:
        - ENV=local
        - CODE_REGISTRY=${CODE_REGISTRY}
        - APP_UID=${APP_UID}
        - APP_GID=${APP_GID}
    command: php -v
    volumes:
      - ${SRC_DIR}:/var/www/app

  scheduler:
    container_name: ${COMPOSE_PROJECT_NAME}-scheduler
    build:
      context: app
      dockerfile: ${ENVIRONMENT}.Dockerfile
      args:
        - ENV=local
        - CODE_REGISTRY=${CODE_REGISTRY}
        - APP_UID=${APP_UID}
        - APP_GID=${APP_GID}
    user: "root:root"
    entrypoint:
      - "crond"
      - "-f"
      - "-l"
      - "8"
      - "-L"
      - "/dev/stdout"
    volumes:
      - ${SRC_DIR}:/var/www/app
    restart: always

  web:
    container_name: ${COMPOSE_PROJECT_NAME}-web
    build:
      context: web
      dockerfile: ${ENVIRONMENT}.Dockerfile
      args:
        - CODE_REGISTRY=${CODE_REGISTRY}
        - HOST=${HOST}
        - DOLLAR=$$
        - SSL_CERT_PATH=${SSL_CERT_PATH}
        - SSL_CERT_KEY_PATH=${SSL_CERT_KEY_PATH}
        - APP_UID=${APP_UID}
        - APP_GID=${APP_GID}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${SRC_DIR}:/var/www/app
      - ./certs:/etc/certs:ro
    depends_on:
      - app
    restart: always

  kvs:
    container_name: ${COMPOSE_PROJECT_NAME}-kvs
    build: kvs
    restart: always

  socket.io:
    container_name: ${COMPOSE_PROJECT_NAME}-socket.io
    build: socket.io
    working_dir: "/var/www/app"
    volumes:
      - ${SRC_DIR}:/var/www/app
    restart: always

volumes:
  db-data:
  certs: